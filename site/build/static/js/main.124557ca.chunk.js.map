{"version":3,"sources":["content/Title.js","content/Map.js","content/Attrib.js","content/Setup.js","Content.js","App.js","index.js"],"names":["Title","className","size","Map","useState","loading","setLoading","api","preset","fetch","window","location","hostname","then","data","json","status","type","color","height","width","onClick","Attrib","href","Setup","numLeds","setNumLeds","airports","onChange","x","target","value","Array","Number","map","i","maxLength","id","str","toUpperCase","console","log","method","headers","body","JSON","stringify","Content","setup","setSetup","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.124557ca.chunk.js","sourcesContent":["import React from \"react\";\nimport { FaPlane } from \"react-icons/fa\";\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <div className=\"row title\">\n        <div className=\"col\">\n          <h2 className=\"header\">MetarMap</h2>\n          <div className=\"row\">\n            <FaPlane size={24} />\n            <h4 className=\"subheader\">The MetarMap controller</h4>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Title;\n","import React, { useState } from \"react\";\nimport Loader from \"react-loader-spinner\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nfunction Map() {\n  const [loading, setLoading] = useState(false);\n  const api = (preset) => {\n    setLoading(true);\n    fetch(`http://${window.location.hostname}:3333/${preset}`)\n      .then((data) => data.json())\n      .then((data) => data.status === \"success\" && setLoading(false));\n  };\n\n  return (\n    <div className=\"map\">\n      <h2 className=\"header\">Map Controls</h2>\n      <hr />\n      {(loading && (\n        <div className=\"center\">\n          <Loader type=\"TailSpin\" color=\"#253031\" height={100} width={100} />\n        </div>\n      )) || (\n        <>\n          <button onClick={() => api(\"america\")}> America</button>\n          <button onClick={() => api(\"metars\")}> Metars</button>\n          <button onClick={() => api(\"red\")}> Red</button>\n          <button onClick={() => api(\"blue\")}> Blue</button>\n          <button onClick={() => api(\"green\")}> Green</button>\n          <button onClick={() => api(\"off\")}> Off</button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\n\nfunction Attrib() {\n  return (\n    <div className=\"attrib\">\n      <h2>Created by Nick Heyland</h2>\n      <h2>\n        For assistance please email me at\n        <a href=\"mailto:snheyland@gmail.com<\"> nheyland@gmail.com</a>\n      </h2>\n      <h2>\n        For source code and instructions click\n        <a href=\"https://github.com/nheyland/metarmap\"> here</a>\n      </h2>\n      <h2>This software is not intended for sale or redistribution</h2>\n      <h2>\n        Interested in the iOS App? Click\n        <a\n          href=\"https://apps.apple.com/us/app/mapremote/id1576002389\nhttps://apps.apple.com/us/app/mapremote/id1576002389\"\n        >\n          {\" \"}\n          here\n        </a>\n      </h2>\n    </div>\n  );\n}\n\nexport default Attrib;\n","import React, { useState } from \"react\";\nimport { AiOutlineArrowDown } from \"react-icons/ai\";\n\nfunction Setup() {\n  const [loading, setLoading] = useState(false);\n  const [numLeds, setNumLeds] = useState(2);\n  let airports = {};\n  const formatAirports = (id, str) => {\n    if (id in airports) {\n      airports[id] = str.toUpperCase();\n    } else {\n      airports[id] = str.toUpperCase();\n    }\n  };\n  const api = (preset) => {\n    setLoading(true);\n    fetch(`http://${window.location.hostname}:3333/${preset}`)\n      .then((data) => data.json())\n      .then((data) => data.status === \"success\" && setLoading(false));\n  };\n  const sendToDevice = () => {\n    console.log(airports);\n    fetch(`http://${window.location.hostname}:3333/setAirports`, {\n      \"Access-Control-Allow-Origin\": \"*\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(airports),\n    })\n      .then((data) => data.json())\n      .then((data) => data.status === \"success\" && setLoading(false));\n  };\n  return (\n    <div className=\"setup\">\n      <h2 className=\"setup-text\">\n        Welcome! Lets get this set up, if you are seeing this, you are connected\n        to the metarmap. Update these settings to setup the map.\n      </h2>\n      <div className=\"setup-row\">\n        <AiOutlineArrowDown size={36} className=\"ctr\" />\n      </div>\n\n      <h2 className=\"setup-text\">\n        First lets run a test, press this button to test all the lights. You\n        should see them turn all the color selected\n      </h2>\n      <div className=\"setup-row\">\n        <button className=\"ctr\" onClick={() => api(\"green\")}>\n          Test Green\n        </button>\n        <button className=\"ctr\" onClick={() => api(\"red\")}>\n          Test Red\n        </button>\n        <button className=\"ctr\" onClick={() => api(\"blue\")}>\n          Test Blue\n        </button>\n      </div>\n      <h2 className=\"setup-text\">\n        All the colors should shine through the map. Make adjustments to the\n        physical map now\n      </h2>\n      <div className=\"setup-row\">\n        <AiOutlineArrowDown size={36} className=\"ctr\" />\n      </div>\n      <h2 className=\"setup-text\">\n        Lets check the amount of LEDs you have, set a number below and we can\n        light up that many LEDs to confirm\n      </h2>\n      <div className=\"setup-row\">\n        <input\n          onChange={(x) => {\n            setNumLeds(x.target.value);\n          }}\n          type=\"number\"\n        />\n        <button onClick={() => api(`testAmount/${numLeds}`)}>\n          Power {numLeds} LEDs\n        </button>\n      </div>\n      <h2 className=\"info special\">\n        Once you enter the airports, DO NOT CHANGE THIS, otherwise your work\n        will disappear\n      </h2>\n      <h2 className=\"setup-text\">\n        Keep testing this setting to see how many Leds are lighting up, do this\n        until you know how many you have\n      </h2>\n      <div className=\"setup-row\">\n        <AiOutlineArrowDown size={36} className=\"ctr\" />\n      </div>\n      <h2 className=\"setup-text\">\n        Lets get the airports, heres how we can do it...\n      </h2>\n      <h2 className=\"setup-text\">\n        For each row below, type in the identifier of the airport in order. The\n        first light is the closest to the pi\n      </h2>\n      <div className=\"airports\"></div>\n      {[...Array(Number(numLeds))].map((x, i) => (\n        <div className=\"airports-row\">\n          <h2>{i + 1}</h2>\n          <input\n            maxLength=\"4\"\n            key={i}\n            id={i}\n            type=\"text\"\n            onChange={(x) => formatAirports(x.target.id, x.target.value)}\n          />\n        </div>\n      ))}\n      <h2 className=\"setup-text\">\n        Thats it! Hit the send to device button, and the information will be\n        saved on device! Now return to the home screen and hit \"metars\"!\n      </h2>\n      <button onClick={() => sendToDevice()}>Send to device!</button>\n    </div>\n  );\n}\n\nexport default Setup;\n","import React, { useEffect, useState } from \"react\";\nimport Map from \"./content/Map\";\nimport Attrib from \"./content/Attrib\";\nimport Setup from \"./content/Setup\";\n\nconst Content = () => {\n  const [setup, setSetup] = useState(false);\n  return (\n    <div className=\"content\">\n      <hr />\n\n      {(!setup && (\n        <>\n          <Map />)\n          <button\n            onClick={() => {\n              setSetup(true);\n            }}\n          >\n            Setup\n          </button>\n        </>\n      )) || <Setup />}\n\n      <Attrib />\n    </div>\n  );\n};\n\nexport default Content;\n","import React from \"react\";\nimport Title from \"./content/Title\";\n\nimport \"./styles/general.css\";\n\nimport Content from \"./Content\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Title />\n      <Content />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}